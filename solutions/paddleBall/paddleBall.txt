// Ball animation.  Starts at random position.  Move in random direction.  Bounces at all edges.

// Constants are variables that never change.  Like the radius of the ball in our animation.
// By convention we use capitals in the variable names to show this.
int SCREEN_WIDTH = 800;
int SCREEN_HEIGHT = 800;

int BALL_WIDTH = 50;
int BALL_VELOCITY = 5;

int PADDLE_WIDTH = 150;
int PADDLE_HEIGHT = 30;

// Ball position.  The ball will be drawn here every time draw() is called.
PVector position = new PVector(random(SCREEN_WIDTH), random(SCREEN_HEIGHT));

// Ball velocity.  This is used to change the position of the ball in every frame.
PVector velocity = randomVector(5);

// setup() is a special function in Processing
// it is called by Processing, only once at the start of the program
void setup() {
  size(SCREEN_WIDTH, SCREEN_HEIGHT); // set the window size
  
  // the smooth() function makes graphics draw more - well - smoothly
  // it just takes a bit longer to draw them - but you usually won't notice
  smooth();
}

// draw() is a special function in Processing
// it is called by Processing, many times per second
// every time the draw function draws, it is called a "frame"
// use draw() to animate things in the processing window, by drawing something a little different in each frame
void draw() {
  // make the whole background black - this will erase what was previously drawn
  background(0);
  
  // setup for drawing the ball
  fill(255,0,0); // make the ball red
  stroke(100,0,0); // make the ball outline dark red
  strokeWeight(2); // make the ball outline just a little thicker

  // draw the ball at its current position
  // the ellipse() function is uses to draw an ellipse(x,y,width,height)
  // a circle is a special case of an ellipse, where the width and height are the same:
  ellipse(position.x, position.y, BALL_WIDTH, BALL_WIDTH);
  
  // draw the paddle at the mouse position
  fill(100);
  stroke(100);
  rect(mouseX - PADDLE_WIDTH/2, SCREEN_HEIGHT - PADDLE_HEIGHT - 10, PADDLE_WIDTH, PADDLE_HEIGHT);
  
  // update the ball position for the next frame by adding the velocity to the position
  // ballY += velocityY is short for ballY = ballY + velocityY
  updatePosition();
}

PVector randomVector(float length) {
  // randomize direction
  PVector v = new PVector(random(10), random(10));
  
  // scale to the required length
  v.normalize(); // set to length 1
  v.set(v.x * length, v.y * length, 0);
  return v;
}

void updatePosition() {
  // check for collision with side or top and update velocity
  if (position.x >= SCREEN_WIDTH - BALL_WIDTH/2 || position.x <= BALL_WIDTH/2) {
    velocity.set(-velocity.x, velocity.y, 0);
  }
  if (position.y <= BALL_WIDTH/2) {
    velocity.set(velocity.x, -velocity.y, 0);
  }

  // check for collision with top of paddle
  if (position.x >= mouseX - PADDLE_WIDTH/2 && position.x <= mouseX + PADDLE_WIDTH/2) {
    if (position.y >= SCREEN_HEIGHT - PADDLE_HEIGHT -5) {
      velocity.set(velocity.x, -velocity.y, 0);
    }
  }
  
  // update the ball position
  position.add(velocity);
}

